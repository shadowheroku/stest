from pyrogram import Client, filters, enums
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import random
import asyncio
import html
from hasnainkk import app
from hasnainkk import user_collection, top_global_groups_collection

PHOTO_URLS = [
    "https://telegra.ph/file/9e8ce3092848a1bc5d9d6.jpg",
    "https://telegra.ph/file/0c9eeb3903a5e9b1f0e19.jpg",
    "https://telegra.ph/file/9e8ce3092848a1bc5d9d6.jpg"
]

# Store last messages to avoid duplicate edits
last_messages = {}

async def get_top_users():
    users = await user_collection.find({}).sort("characters", -1).limit(10).to_list(length=10)
    return users

async def get_top_groups():
    groups = await top_global_groups_collection.find({}).sort("count", -1).limit(10).to_list(length=10)
    return groups

async def get_top_coin_users():
    users = await user_collection.find({}).sort("balance", -1).limit(10).to_list(length=10)
    return users

async def get_top_star_users():
    users = await user_collection.find({}).sort("golden_stars", -1).limit(10).to_list(length=10)
    return users

async def generate_leaderboard(data, title, is_user=True):
    message = f"<b>üèÜ {title} üèÜ</b>\n\n"
    for i, item in enumerate(data, start=1):
        if is_user:
            user_id = item.get('id', 'Unknown')
            name = html.escape(item.get('first_name', 'Unknown'))
            if len(name) > 15:
                name = name[:15] + '...'
            count = len(item.get('characters', [])) if title == "CHARACTER LEADERBOARD" else \
                   item.get('balance', 0) if title == "COIN LEADERBOARD" else \
                   item.get('golden_stars', 0)
            message += f"{i}. <a href='tg://user?id={user_id}'><b>{name}</b></a> ‚ûæ <b>{count}</b>\n"
        else:
            name = html.escape(item.get('group_name', 'Unknown'))
            if len(name) > 20:
                name = name[:20] + '...'
            count = item.get('count', 0)
            message += f"{i}. <b>{name}</b> ‚ûæ <b>{count}</b>\n"
    return message

async def safe_edit_message(callback_query, new_caption, new_markup):
    chat_id = callback_query.message.chat.id
    message_id = callback_query.message.id
    key = f"{chat_id}_{message_id}"
    
    # Get last message data
    last_caption, last_markup = last_messages.get(key, (None, None))
    
    # Only edit if something actually changed
    if new_caption != last_caption or new_markup != last_markup:
        try:
            await callback_query.edit_message_caption(
                caption=new_caption,
                parse_mode=enums.ParseMode.HTML,
                reply_markup=new_markup
            )
            # Update last message data
            last_messages[key] = (new_caption, new_markup)
        except Exception as e:
            if "MESSAGE_NOT_MODIFIED" not in str(e):
                await callback_query.message.edit_text(f"‚ùå Error: {str(e)}")
    else:
        await callback_query.answer("Already showing this leaderboard!")

@app.on_message(filters.command("rank"))
async def rank_command(client, message):
    try:
        loading_msg = await message.reply("üìä Generating leaderboard...")
        
        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ User Top", callback_data="user_top"),
             InlineKeyboardButton("Group Top", callback_data="group_top")],
            [InlineKeyboardButton("Coin Top", callback_data="coin_top"),
             InlineKeyboardButton("Star Top", callback_data="star_top")]
        ])
        
        top_users = await get_top_users()
        leaderboard = await generate_leaderboard(top_users, "CHARACTER LEADERBOARD")
        
        await loading_msg.delete()
        sent_msg = await message.reply_photo(
            photo=random.choice(PHOTO_URLS),
            caption=leaderboard,
            parse_mode=enums.ParseMode.HTML,
            reply_markup=buttons
        )
        
        # Store initial message
        key = f"{sent_msg.chat.id}_{sent_msg.id}"
        last_messages[key] = (leaderboard, buttons)
    except Exception as e:
        await message.reply(f"‚ùå Error: {str(e)}")

@app.on_callback_query(filters.regex("^user_top$"))
async def user_top_callback(client, callback_query):
    await callback_query.answer()
    try:
        top_users = await get_top_users()
        leaderboard = await generate_leaderboard(top_users, "CHARACTER LEADERBOARD")
        
        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ User Top", callback_data="user_top"),
             InlineKeyboardButton("Group Top", callback_data="group_top")],
            [InlineKeyboardButton("Coin Top", callback_data="coin_top"),
             InlineKeyboardButton("Star Top", callback_data="star_top")]
        ])
        
        await safe_edit_message(callback_query, leaderboard, buttons)
    except Exception as e:
        await callback_query.message.edit_text(f"‚ùå Error: {str(e)}")

@app.on_callback_query(filters.regex("^group_top$"))
async def group_top_callback(client, callback_query):
    await callback_query.answer()
    try:
        top_groups = await get_top_groups()
        leaderboard = await generate_leaderboard(top_groups, "GROUP LEADERBOARD", is_user=False)
        
        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("User Top", callback_data="user_top"),
             InlineKeyboardButton("‚úÖ Group Top", callback_data="group_top")],
            [InlineKeyboardButton("Coin Top", callback_data="coin_top"),
             InlineKeyboardButton("Star Top", callback_data="star_top")]
        ])
        
        await safe_edit_message(callback_query, leaderboard, buttons)
    except Exception as e:
        await callback_query.message.edit_text(f"‚ùå Error: {str(e)}")

@app.on_callback_query(filters.regex("^coin_top$"))
async def coin_top_callback(client, callback_query):
    await callback_query.answer()
    try:
        top_users = await get_top_coin_users()
        leaderboard = await generate_leaderboard(top_users, "COIN LEADERBOARD")
        
        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("User Top", callback_data="user_top"),
             InlineKeyboardButton("Group Top", callback_data="group_top")],
            [InlineKeyboardButton("‚úÖ Coin Top", callback_data="coin_top"),
             InlineKeyboardButton("Star Top", callback_data="star_top")]
        ])
        
        await safe_edit_message(callback_query, leaderboard, buttons)
    except Exception as e:
        await callback_query.message.edit_text(f"‚ùå Error: {str(e)}")

@app.on_callback_query(filters.regex("^star_top$"))
async def star_top_callback(client, callback_query):
    await callback_query.answer()
    try:
        top_users = await get_top_star_users()
        leaderboard = await generate_leaderboard(top_users, "STAR LEADERBOARD")
        
        buttons = InlineKeyboardMarkup([
            [InlineKeyboardButton("User Top", callback_data="user_top"),
             InlineKeyboardButton("Group Top", callback_data="group_top")],
            [InlineKeyboardButton("Coin Top", callback_data="coin_top"),
             InlineKeyboardButton("‚úÖ Star Top", callback_data="star_top")]
        ])
        
        await safe_edit_message(callback_query, leaderboard, buttons)
    except Exception as e:
        await callback_query.message.edit_text(f"‚ùå Error: {str(e)}")
